# -*- mode: fvwm -*-
# ====================[ main                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Fluviol, a minimalist theme for FVWM[-Crystal] emphasizing ascetic aesthetics,
# virtual desktops, keyboard- and console-centric usability, and Zsh-driven
# extensibility (e.g., wallpaper rotation, Kuake consoles).
#
# --------------------( TODO                               )--------------------
# * H0LY MOTHER OF THE GODDESS! I'm using a roughly three year-old snapshot
#   of Zeshy here! Just check "fvwm/global". Jeebus. I mean... what? How did
#   this never come up? This needs to default to "$[ZESHY_HOME]" immediately.
#   In fact, why the heck do we need a separate "$[FLUVIOL_ZESHY_HOME]"
#   polluting the namespace? We don't. Cut it.

# ....................{ PATHS                              }....................
#FIXME: Throw a visual exception and load FVWM, instead, if this path cannot be
#found. Also, why can't we just default to the $[PWD]? (*IS* there a $[PWD]?)

# Absolute path of the top-level Fluviol directory. Ideally, the external caller
# sets this on our behalf. If not, default to the directory with this script.
Test (!EnvIsSet FLUVIOL_HOME) SetEnv FLUVIOL_HOME "$[.]"

# Absolute path of the Fluviol FVWM script directory.
SetEnv FLUVIOL_FVWM_DIR "$[FLUVIOL_HOME]/fvwm"

#FIXME: Uhm; why do we need this? Seems a tad silly. If we really need this,
#can't the "main" script find its own absolute path? Poor name, in any case.
# Absolute path of this FVWM script.
SetEnv FLUVIOL_RC_FILE "$[FLUVIOL_HOME]/main"

# ....................{ FUNCTIONS                          }....................
#FIXME: Rename to DefineFunction().
# void DefineFunc(string functionName, string functionCode)
#
# Define the passed function with the passed implementation.
DestroyFunc DefineFunc
  AddToFunc DefineFunc
+ I DestroyFunc $0
+ I   AddToFunc $*

# Prevent windows from claiming "urgency." (Typically, FVWM forcefully warps
# to each window which claims it urgently needs attention. Don't allow that.)
# Do this early, so as to avoid unpleasantness later.
DefineFunc UrgencyFunc
+ I Nop

DefineFunc UrgencyDoneFunc
+ I Nop

# ....................{ MODULES                            }....................
# void LoadModule(string moduleName, string moduleArg1, string moduleArg2, ...)
#
# Load the passed module with the passed parameters.
DefineFunc LoadModule
+ I KillModule $0
+ I     Module $*

# ....................{ FUNCTIONS ~ logs                   }....................
#FIXME: Since we're defining our own "/usr/bin/fluviol", there's no reason we
#can't explicitly do this there. Make it so.
# FVWM logs stderr (but not stdout) to "~/.xsession-errors", by default. To make
# FVWM log stderr and stdout to a file "~/.xsession", start Fluviol via:
#       startx > ~/.xsession 2>&1

# void Log(string Message)
#
# Log the passed message to the FVWM logfile.
DefineFunc Log
+ I SetTimestamp
+ I Echo [$[FLUVIOL_TIMESTAMP]] fluviol: $*

# void LogError(string ErrorMessage)
#
# Log the passed error message to the FVWM logfile.
DefineFunc LogError
+ I SetTimestamp
+ I Echo [$[FLUVIOL_TIMESTAMP]] fluviol! $*

#FIXME: Why the "KeepRc" here? We *WANT* to return with error status, right?
#Where is this actually called?
# void LogAndBreak(string Message)
#
# Log the passed message to the FVWM logfile and "break" (i.e., immediately
# return with error status) from the calling function.
DefineFunc LogAndBreak
+ I Log $*
+ I KeepRc Break 2

# void LogErrorAndBreak(string ErrorMessage)
#
# Log the passed error message to the FVWM logfile and "break" from the calling
# function.
DefineFunc LogErrorAndBreak
+ I LogError $*
+ I Break 2

# void SetTimestamp(void)
#
# Set "FLUVIOL_TIMESTAMP", a string global expanding to the human-readable time
# at which this function was last called.
DefineFunc SetTimestamp
+ I PipeRead 'echo SetEnv FLUVIOL_TIMESTAMP $(date +"%F~%H:%M:%S")'

# Log a startup message as soon as possible (i.e., on defining SetTimestamp()).
Log loading "$[FLUVIOL_RC_FILE]"...

#FIXME: O.K.; shift all functions that follow defining the core Fluviol language
#into a new "core" component. The existing Import() function calls a few such
#functions, so just implement the equivalent import logic manually here.

# ....................{ FUNCTIONS ~ flow                   }....................
# FVWM restrictions limit the usefulness of flow control functionality. As
# "man fvwm" admits, "Important note: return codes are... not inherited by sub
# functions." Hence, return codes flow *UP* the function call hierarchy but
# never *DOWN*.

# void Return(void)
#
# Return from the calling function without changing the current return code.
DefineFunc Return
+ I KeepRc Break 2

# void ReturnMatch(void)
#
# Return from the calling function with return code "Match" (i.e., 1).
DefineFunc ReturnMatch
+ I SetReturnCodeToMatch
+ I Return

# void ReturnError(void)
#
# Return from the calling function with return code "Error" (i.e., -1).
DefineFunc ReturnError
+ I SetReturnCodeToError
+ I Return

#FIXME: Great! But how to set the current return code to "NoMatch" (i.e., 0)? I
#suppose we'd need to conjure up a condition guaranteed to never match:
#something inherently contradictory should suffice, yes?

# void SetReturnCodeToMatch(void)
#
# Set the current return code to "Match" (i.e., 1), signifying success.
DefineFunc SetReturnCodeToMatch
+ I PipeRead true

# void SetReturnCodeToError(void)
#
# Set the current return code to "Error" (i.e., -1), signifying fatal error.
DefineFunc SetReturnCodeToError
+ I PipeRead false

#FIXME: Hmm; this function probably doesn't work at all, due to the above
#important note. (This has been confirmed. Doesn't work.) Excise everywhere,
#replacing with manual... *WAIT*. We *CAN* do something like this, but we'll
#have to do it manually by passing a new first argument to this function:
#$[cond.rc]. While FVWM doesn't implicitly pass such return code to called
#functions, there's no reason we can't manually do so ourselves. I believe we
#could then do something resembling:
#
#DefineFunc OrDie
#+ I SetEnv cond.rc $0
#+ I TestRc (Match) Return
#+ I KeepRc LogErrorAndBreak $[1-]
#
#This assumes, of course, that FVWM lets us overwrite $[cond.rc] manually. It
#should, but... well, it *IS* a special variable. Easy to test, anyway. If this
#works, we should be able to extend the metaphor to other flow control
#functions. If the above doesn't work, also try:
#
#+ I SetEnv [cond.rc] $0
#
#I'm unclear whether or not the "[" and "]" are part of the variable name or
#constitute genuine FVWM syntax. Ah, the latter, actually; "[" and "]" are
#requisite FVWM syntax for all variable names of more than one character.

# void OrDie(string ErrorMessage)
#
# If the current return code (as returned by the prior FVWM command) indicates
# "NoMatch", "Error", or "Break", log the passed error message to the FVWM
# logfile and break from the calling function.
#
# Note: this function avoids changing the value of $[cond.rc], the return code
# of the prior FVWM function. This allows later functions to perform independent
# testing of the return code, which is probably nice.
DefineFunc OrDie
+ I TestRc (Match) Return
+ I KeepRc LogErrorAndBreak $*

# ....................{ FUNCTIONS ~ variables              }....................
#FIXME: Rename to SetVariableIfUnset(). *EVERYWHERE* we say "SetEnv..." should,
#in fact, be "SetVariable...". Slightly longer, but much more readable.
# void SetEnvIfUnset(string VariableName, string VariableValue)
#
# Set the passed environment variable, if currently unset, to the passed string.
DefineFunc SetEnvIfUnset
+ I Test (!EnvIsSet $0) SetEnv $*

#FIXME: Rename to SetEnvToFile().
# void SetFile(string VariableName, string Filename)
#
# Set the passed environment variable to the passed absolute path. If there
# exists no file at this path, or there does but the file is not readable, log
# an error.
DefineFunc SetFile
+ I SetEnv $[0] $[1]
+ I PipeRead '[ -f "$[1]" ] && [ -r "$[1]" ] || \
    echo LogErrorAndBreak "$[1]" not found for setting $[0]!'

#FIXME: Rename to SetEnvToDir().
# void SetDir(string VariableName, string Dirname)
#
# Set the passed environment variable to the passed absolute path. If there
# exists no path at this path, or there does but the path is not readable, log
# an error.
DefineFunc SetDir
+ I SetEnv $[0] $[1]
+ I PipeRead '[ -d "$[1]" ] && [ -r "$[1]" ] || \
    echo LogErrorAndBreak "$[1]/" not found for setting $[0]!'

#FIXME: Rename to SetEnvToDirAndMakeIfNeeded().
# void SetDirAndMakeIfNeeded(string VariableName, string Dirname)
#
# Set the passed environment variable to the passed absolute path. If there
# exists a path at this path but the path is not readable, log an error. On the
# other hand, if there does not exist a path, explicitly make that path.
DefineFunc SetDirAndMakeIfNeeded
+ I MakeDirIfNeeded $[1]
+ I SetDir $*

#FIXME: Rename to SetEnvToCommand().
# void SetCommand(string VariableName, string CommandName)
#
# Set the passed environment variable to the absolute path of the passed
# program on this machine. If already set, this function returns without
# modifying this variable's current value.
#
# If this program does not exist on this machine, this function currently
# sets this environment variable to the empty string and logs an error message.
# It is the caller's responsibility to handle this.
DefineFunc SetCommand
+ I SetPreferredCommand $0 $1

#FIXME: Rename to SetEnvToFirstCommand().
# void SetPreferredCommand(string VariableName, string CommandName1, ...)
#
# Sets the environment variable "VariableName", if not already set, to the
# absolute path of the first program in the string "CommandNames" of space-
# delimited program names existing on this machine. If already set, this
# function returns without modifying this variable's current value.
#
# Thus, if both "/usr/bin/aterm" and "/usr/bin/eterm" exist on this machine
# while "/usr/bin/urxvt" does not, the following call sets "FLUVIOL_XTERM_COMMAND" to
# "/usr/bin/aterm":
#
#   SetPreferredCommand "FLUVIOL_XTERM_COMMAND" "urxvt aterm eterm"
#
# If no programs in the string exist on this machine, this function currently
# sets the environment variable to the empty string and logs an error message.
# It is the caller's responsibility to handle this.
#DefineFunc SetEnvEnv
#+ I SetEnv env.name  $0
#+ I SetEnv env.value $0
DefineFunc SetPreferredCommand
+ I Test (EnvIsSet $0) LogAndBreak set $0 to "$[$0]".
+ I PipeRead '\
PREFERRED_COMMAND="$(which $[1-] 2>/dev/null | head -1)"; \
if [ -n "$PREFERRED_COMMAND" ]; then \
  echo SetEnv $[0] "$PREFERRED_COMMAND"; \
  echo "Log $[0] set to \"$PREFERRED_COMMAND\"."; \
else \
  echo "LogErrorAndBreak $[0] not set, as none of \"$[1-]\" found!"; \
fi'

# ....................{ FUNCTIONS ~ paths                  }....................
# void MakeDirIfNeeded(string Dirname)
#
# Make the directory with the passed absolute path and all parent directories of
# such directory, recursively.
DefineFunc MakeDirIfNeeded
#FIXME: Zeshify. Hmm... no, Zeshy doesn't really quite work as the default
#Fluviol shell unless we modify its behavior. Which is certainly feasible, of
#course. The principle change we'd need to make in a derivative "FluviolZeshy"
#shell is to *ALWAYS* prefix exception messages with "LogErrorAndBreak".
#Possibly simple? No idea. Interesting, however, and certainly essential.
+ I PipeRead \
 'if [ -d "$[0]" ]; then echo Nop; \
elif [ -e "$[0]" ]; then echo LogErrorAndBreak "$[0]/" not a directory!; \
else \
  echo Log making "$[0]/"...; \
  MKDIR_STDERR="$(mkdir -p "$[0]" 2>&1)"; \
  if [ $? -ne 0 ]; then \
    echo LogErrorAndBreak "$[0]/" not creatable, as: $MKDIR_STDERR!; \
  fi; \
fi'

# ....................{ FUNCTIONS ~ commands               }....................
#FIXME: Print graphical errors in addition to logging error messages on startup
#error.

#FIXME: Can't the check be reduced to:
#   'pidof "$[1]" 1>/dev/null 2>&1 or echo $[*]'
#Also, what's up with the odd function name?
# void IfNotAlreadyRunningCommand(string CommandName, string Function, ...)
#
# Run the passed FVWM command if the passed external program is not already
# running *AND* is installed on the current machine.
DefineFunc IfNotAlreadyRunningCommand
+ I Test (x $1) KeepRc PipeRead \
    'if ! pidof "$[1]" 1>/dev/null 2>&1; then echo $[*]; fi'
+ I TestRc (NoMatch) Log "$1" not installed... ignoring.

# void RunCommand(string CommandName)
#
# Execute the passed external command as a blocking process. That is, run that
# command and wait for that command to end before returning.
#
# This function also prints a relevant log message, for debugging.
DefineFunc RunCommand
+ I Log running "$[0]"...
+ I PipeRead '$[*] 1>&2; echo Nop'
+ I Log running "$[0]"... done.

# void ForkCommand(string CommandName)
#
# Execute the passed external command as a parallel process. That is, fork that
# command and return immediately.
#
# This function also prints a relevant log message, for debugging.
DefineFunc ForkCommand
+ I Log forking "$[0]"...
+ I Exec exec $*

# void ForkCommandAndWait(string CommandName)
#
# Execute the passed external command as a parallel process. That is, fork that
# command. Unlike the "ForkCommand" function above, this function waits for a
# new process corresponding to that command to appear in the process table.
#
# This function also prints a relevant log message, for debugging.
#FIXME: At the moment, this just hardcodes a sleep for 2 seconds. Yum. Unsure
#if the longer code, below, actually works.
DefineFunc ForkCommandAndWait
+ I Log forking "$[0]"...
+ I Exec exec $*
+ I PipeRead 'sleep 2'
+ I Log forking "$[0]"... done.
#+ I PipeRead \
#'INIT_TIME=$(date +"%s") \
#CLOSE_TIME=$(($INIT_TIME + 8))' \
#while [ ! $(pidof "$[0]") -a $(date +"%s")  ]; do; done'

# ....................{ FUNCTIONS ~ imports                }....................
# void Import(string Filename)
#
# Load and run the FVWM script with the passed absolute path.
DefineFunc Import
+ I Log loading "$[0]"...
+ I Read $[0] quiet
#FIXME: This isn't actually working. Easy to test: just pass a random path. It
#superficially appears to work, since "... failed!" never appears, but doesn't
#actually work, of course. Hmm.
+ I OrDie loading "$[0]"... failed!
#+ I OrDie cannot import "$[0]"!

#FIXME: S*w*e*e*t. We can seamlessly extend this function to support user-
#specific configuration. It's simple: just have this function first search for
#the passed path relative to $[FLUVIOL_DOT_FVWM_DIR]. If found, use that path;
#otherwise, default to $[FLUVIOL_FVWM_DIR].
#FIXME: Actually, we should never really be calling this function. Instead,
#*ALWAYS* call "Import $./${basename}". Remove all remaining references to this
#function please.

# void ImportFluviol(string Filename)
#
# Load and run the FVWM script with the passed relative path to the
# $[FLUVIOL_FVWM_DIR] directory defined above.
DefineFunc ImportFluviol
+ I Import "$[FLUVIOL_FVWM_DIR]/$[0]"

# ....................{ LIFECYCLE                          }....................
# Define lifecycle functions prior to importing Fluviol components, most of
# which attempt to append functionality to such functions.

# Run on FVWM [re]start, before running "InitFunction" and "RestartFunction".
DefineFunc StartFunction
+ I Nop
#+ I Log loading "$[FLUVIOL_RC_FILE]"...

# Run on FVWM restart, after running "StartFunction".
DefineFunc RestartFunction
+ I Log reloading "$[FLUVIOL_RC_FILE]"...

# Run on FVWM startup, after running "StartFunction". (This function is run once
# and only once; thus, it makes a respectable pad for launching daemons.)
DefineFunc InitFunction
+ I Log initializing "$[FLUVIOL_RC_FILE]"...

# Run on FVWM shutdown (and restart, before running "StartFunction").
DefineFunc ExitFunction
+ I Test (Quit) ShutdownFunction

# Run on FVWM shutdown (but not restart).
DefineFunc ShutdownFunction
+ I Log shutting down...

# ....................{ DEPENDENCIES                       }....................
#FIXME: Be nice to add support for importing multiple scripts at a time. Looping
#feasible in pure Zsh? Oh, right; PipeRead() it, if I recall correctly.
#FIXME: Interesting. The following command fails:
#    Import $./global/global
#Clearly, "$." does not refer to what we wanted it to. (Perhaps due to
#symlinking?) Try logging "$." to see where we currently are. *shrug*

# For code sanity, import Fluviol components defining global variables prior to
# all other Fluviol components.
ImportFluviol global/main

# Import all other Fluviol components. Order is (hopefully) not important.
ImportFluviol command/main
ImportFluviol input/main
ImportFluviol page/main
ImportFluviol ui/main
ImportFluviol window/main
ImportFluviol x/main

#FIXME: Split into two files: "window/event" and "page/event". Only makes sense!
ImportFluviol event

# ....................{ WINDOW PLACEMENT                   }....................
# Place windows by avoiding overlapping. (Grep "Window Manager placement" in
# "man fvwm", for unsightly details.)
Style * MinOverlapPlacement
#Style * MinOverlapPercentPlacement

# Avoid overlapping windows on higher layers or windows having EWMH strut hints.
Style * MinOverlapPlacementPenalties 1 2 0 1 0.05 50

# Avoid overlapping windows smaller than the newly placed window.
Style * MinOverlapPercentPlacementPenalties 12 6 3 1

# Ignore the EWMH working area when placing windows.
Style * EWMHPlacementUseWorkingArea

# Do not allow normal windows to place themselves.
Style * NoPPosition

# Allow transient windows to place themselves.
Style * UseTransientPPosition

# ....................{ WINDOW LIST                        }....................
# Shows a well-decorated, descriptive window list while cycling forwards and
# backwards through windows. (See "KEY BINDINGS", above.)
DefineFunc ShowWindowList
+ I WindowList ($[FLUVIOL_FOCUSABLE_WINDOW]) \
    Root c c \
    Function RaiseWindowToHeadOfWindowList \
    CurrentAtEnd \
    MaxLabelWidth 40 NoCurrentDeskTitle NoGeometry NoHotkeys \
    SelectOnRelease $[FLUVIOL_KEY_MODIFIER_SUPER_UNIX]

# ....................{ WINDOW FOCUSING                    }....................
# FVWM is ICCCM-compliant. Unfortunately, this windowing manager psuedo-standard
# permits windows to designate themselves as non-focusable - and FVWM respects
# the designation. This is particularly problematic with "broken" applications
# (e.g., Java AWT). To circumvent this, specify the "Lenience" style globally,
# permitting FVWM to conveniently overlook such formalities.
FocusStyle * Lenient

# Do not focus windows on entering them with the pointer.
FocusStyle * !EnterToFocus

# Do not unfocus windows on leaving them with the pointer.
FocusStyle * !LeaveToUnfocus

# Do not allow programs to seize the focus.
FocusStyle * !FocusByProgram

# Permit calling Focus(), but do not warp the pointer when doing so.
#FocusStyle * FocusByFunction, FocusByFunctionWarpPointer
FocusStyle * FocusByFunction, !FocusByFunctionWarpPointer

# Sort the window list by the order such windows were focused.
FocusStyle * SortWindowlistByFocus

# Automatically focus new windows.
FocusStyle * GrabFocus, GrabFocusTransient

# Automatically focus the next window when closing the currently focused window.
FocusStyle * ReleaseFocus, ReleaseFocusTransient

# Focus unfocused windows when clicking on or in those windows.
#Style * MouseFocus
FocusStyle * ClickToFocus, ClickDecorToFocus, ClickIconToFocus

# Raise focused windows when clicking on or in those windows. Coupled with the
# prior focus style, the first and second clicks on unfocused windows focus and
# raise such windows (mimicing the conventional "double click").
FocusStyle * ClickRaisesFocused, ClickDecorRaisesFocused, ClickIconRaisesFocused

# Pass clicks focusing or raising windows onto those windows.
FocusStyle * PassFocusClick, PassRaiseClick

# Pass clicks produced by pointer drags onto the clicked and dragged windows but
# do not raise such windows. This allows select text without raising windows.
FocusStyle * IgnoreRaiseClickMotion

# ....................{ WINDOW FOCUSING ~ functions        }....................
# Select the currently focused window if satisfying $[FLUVIOL_FOCUSABLE_WINDOW].
# This is of principle use in definining sensible key bindings.
DefineFunc CurrentWindow
+ I Current ($[FLUVIOL_FOCUSABLE_WINDOW]) $*

# Raise and unshade (but not focus) the current window.
DefineFunc RaiseWindow
+ I Raise
+ I WindowShade False

# Raise, unshade, and focus the current window.
DefineFunc RaiseWindowAndFocus
+ I RaiseWindow
+ I Focus

# Called by AfterChangingWindowFocus() to record the most recently
# focused window for the current page.
DefineFunc StoreLastFocusedWindowForCurrentPage
+ I All ($[FLUVIOL_RECALLABLE_WINDOW], !Focused) \
    State $[FLUVIOL_IS_WINDOW_LAST_FOCUSED] False
+ I Current ($[FLUVIOL_RECALLABLE_WINDOW]) \
    State $[FLUVIOL_IS_WINDOW_LAST_FOCUSED] True

# Called by AfterChangingToNewPage() to restore the most recently
# focused window for the current page.
DefineFunc RaiseLastFocusedWindowForCurrentPage
# If there is a recently focused window as recorded by the
# "FLUVIOL_IS_WINDOW_LAST_FOCUSED" state, focus that window.
+ I Next ($[FLUVIOL_RECALLABLE_WINDOW], State $[FLUVIOL_IS_WINDOW_LAST_FOCUSED]) \
    KeepRc RaiseWindowAndFocus
# Otherwise, focus the window nearest the mouse cursor.
+ I TestRc (NoMatch) \
    Next ($[FLUVIOL_RECALLABLE_WINDOW]) \
    RaiseWindowAndFocus

# Called by the WindowList as implementation of its window-switching.
DefineFunc RaiseWindowToHeadOfWindowList
+ I FlipFocus
+ I RaiseWindowAndFocus

# Changes window focus for windows matching the passed condition as a group.
# That is, focusing any one window matching the passed condition automatically
# causes all other windows which also match the passed condition to be focused;
# similarly, defocusing any window matching the passed condition automatically
# causes all other windows which also match the passed condition to be
# defocused.
#
# This can be used to ensure, in particular, that GiMP windows focus and defocus
# as a uniform group.
DefineFunc ChangeWindowFocusAsAGroup
+ I ThisWindow ($[0]) All ($[FLUVIOL_FOCUSABLE_WINDOW], $[0], !Raised)\
    RaiseWindow

# When restarting FVWM, FVWM occasionally fails to restore window focus to the
# most recently focused window prior to the reset. We restore the focus, now, to
# some eligible window on the current desktop page.
AddToFunc RestartFunction
+ I None (Focused) Next ($[FLUVIOL_FOCUSABLE_WINDOW], !Shaded)\
    RaiseWindowAndFocus

# ....................{ WINDOW SHADING                     }....................
# Shade and lower the current window.
DefineFunc ShadeWindow
+ I WindowShade True
+ I Lower

# Shade, lower, and defocus the current window; then, unshade, raise, and
# refocus the most recently focused window for the current desktop page.
DefineFunc ShadeWindowAndRaisePreviousWindow
+ I ShadeWindow
+ I Prev ($[FLUVIOL_FOCUSABLE_WINDOW], !Shaded) RaiseWindowAndFocus

# Shade all "shady," unfocused windows. (Typically, this is called when changing
# window focus away from the folque or a fluake, to shade that window.)
DefineFunc ShadeAllShadyUnfocusedWindows
+ I All ($[FLUVIOL_FOCUSABLE_WINDOW], $[FLUVIOL_SHADY_WINDOW], !Focused, !Shaded)\
    ShadeWindow

# Raise and unshade the current window, if it's shaded; or lower and shade it,
# otherwise.
DefineFunc ToggleWindowShading
+ I ThisWindow (Shaded) KeepRc ThisWindow RaiseWindowAndFocus
+ I TestRc (NoMatch)           ThisWindow ShadeWindowAndRaisePreviousWindow

# ....................{ WINDOW MOVING                      }....................
# Move windows opaquely, when the size of those windows is less than or equal to
# this percentage of the screen's size. (This redraws window content while
# moving windows for sufficiently small windows only, and outlines and hides
# window content for all larger windows.)
OpaqueMoveSize 0

# Snap windows to nearby windows and icons to nearby icons, when interactively
# moving either. "Snap" means immediately move so as to ensure the nearest
# border of the two windows or icons is precisely adjacent, while "nearby"
# means within $PIXEL_PROXIMITY pixels where "$PIXEL_PROXIMITY is the first
# argument to this style.
Style * SnapAttraction 8 SameType Screen

# ....................{ WINDOW RESIZING                    }....................
# Maximize the current window, if currently un-maximized; or restore it to its
# former, un-maximized size, if currently maximized.
DefineFunc ToggleWindowMaximization
+ I Maximize toggle 100 100

# Resize windows opaquely, by default. (This redraws window content while
# resizing windows, rather than outlining and hiding window content. The former
# can be more aesthetically pleasing, but resource consumptive.)
Style * ResizeOpaque

# Permit windows to resize themselves. (This permits Emacs, in particular, to
# override the FVWM resize hint for Emacs frames.)
Style * ResizeHintOverride

# ....................{ WINDOW STYLES                      }....................
# Hide the window frame and titlebar for all windows. (This requires that you
# move, resize, and otherwise manipulate windows with key bindings.)
Style * !Title, !Handles, BorderWidth 0, HandleWidth 0

# Entitle windows "$[WINDOW_NAME] $[WINDOW_INDEX]", where $[WINDOW_NAME] is
# that window's exact name and $[WINDOW_INDEX] an integer between 1 and N,
# where N is the number of windows with that same exact name. (This helps us
# discern between multiple instances of that same window.)
Style * TitleFormat %n (%t)
Style * IconTitleFormat %n (%t)

# Window-shade windows instantaneously, without graduated animation. (This is
# arguably more efficient, but arguably less aesthetic.)
Style * WindowShadeShrinks, WindowShadeAlwaysLazy
Style * WindowShadeSteps 0

# Decorate transient windows, just as we decorate normal windows.
Style * DecorateTransient

# Prevent all windows from sticking across pages.
Style * !StickyAcrossPages

# Do not cache obscured window pixels in memory. (Caching obscured window pixels
# is beneficial when serving remote X11 clients, but otherwise not.)
Style * BackingStoreOff, SaveUnderOff

# Hide the "geometry" window when moving and resizing windows. (This window
# shows the size and state of the window being moved or resized; but,
# generally, serves more as a nuisance than assistance.)
HideGeometryWindow Move, Resize

#FIXME: Should be configurable by the user. Shunt somewhere else, ya?
# ....................{ WINDOW STYLES ~ programs           }....................
# Prevent the following windows from appearing on window lists.
Style "Speedbar*" CirculateSkip, WindowListSkip
Style "*SPEEDBAR" CirculateSkip, WindowListSkip

#FIXME: Do we have "ClickIconRaisesUnfocused" currently enabled? Do so if not.
# Prevent ToME4 from iconifying itself on losing the focus, as that plays havoc.
# And not the good kind of havoc.
Style t-engine !Iconifiable

# ....................{ CURSOR STYLES                      }....................
CursorStyle TITLE    left_ptr   blue    white
CursorStyle SYS      left_ptr   brown   white
CursorStyle DEFAULT  left_ptr   black   white
CursorStyle SELECT   crosshair  black   white
CursorStyle DESTROY  pirate     black   white
CursorStyle MENU     left_ptr   black   white
CursorStyle STROKE   left_ptr   red     white
CursorStyle ROOT     left_ptr   black   white

# Do not change the cursor when waiting for FVWM to return from blocking events.
BusyCursor * False

# ....................{ SCREENSHOTS                        }....................
#FIXME: Save files into Fluviol-specific directories: e.g.,
#   + I Exec imgname=~/pic/screenshots/`date "+%Y.%m.%d_at_%H.%M.%S"`_$[w.class].jpg \
#           && import -quality 95 -frame -window $[w.id] $imgname && FvwmCommand "function Start_viewer $imgname"

# Capture a screenshot of the entire screen.
DefineFunc ScreenshotScreen I RunCommand $[FLUVIOL_SCREENSHOT_SCREEN_COMMAND]

# Capture a screenshot of the selected window.
DefineFunc ScreenshotScreen I RunCommand $[FLUVIOL_SCREENSHOT_WINDOW_COMMAND] $[w.id]

# Capture a screenshot of the selected region.
DefineFunc ScreenshotScreen I RunCommand $[FLUVIOL_SCREENSHOT_REGION_COMMAND]

# ....................{ AUDIO VOLUME                       }....................
#FIXME: Unworking, I believe. Indeed; fix me up, please-please-please.
#DefineFunc MuteVolume  I RunCommand $[FLUVIOL_MUTE_VOLUME_COMMAND]
#DefineFunc LowerVolume I RunCommand $[FLUVIOL_LOWER_VOLUME_COMMAND]
#DefineFunc RaiseVolume I RunCommand $[FLUVIOL_RAISE_VOLUME_COMMAND]

# ....................{ XTERM CONSOLE                      }....................
# Create a new console window. This function ensures a sane environment prior to
# creating the console window: in particular, if "$[FLUVIOL_XTERM_COMMAND]" is "urxvtc",
# then this function ensures that "urxvtd" has already been executed and, if not,
# does so.
#
# Fluakes and Folques call this function on creation to create their
# underlying console windows.
DefineFunc MakeConsole
+ I Test (x $[FLUVIOL_XTERM_COMMAND]) KeepRc MakeConsoleInternal $*
+ I OrDie   $[FLUVIOL_XTERM_COMMAND] not found; not creating console!

DefineFunc MakeConsoleInternal
+ I Test (EnvMatch FLUVIOL_XTERM_COMMAND "*urxvtc") \
    DaemonizeAndWait urxvtd --opendisplay --quiet --fork
+ I Exec $*

# ....................{ FLUAKE                             }....................
#FIXME: Fairly obsolete, yes? I assume we solved this, somehow.
# Fluakes tend not to maximize properly. Specifically, console windows
# tend to align their width along strict character boundries--which increases
# the likelihood of a Fluake failing to consume all possible horizontal
# pixels on an FVWM "Maximize 100 100" command. Consequently, we brutally force
# Fluakes to consume slightly more than one screen's width of the screen.
# (This obtains the desired effect, though slightly hackily.)
#ipeRead 'echo SetEnv FLUVIOL_FLUAKE_WIDTH $(expr $[vp.width])'

DefineFunc ToggleOrMakeFluake
+ I Next ($[FLUVIOL_FLUAKE]) KeepRc ToggleFluake
+ I TestRc (NoMatch) MakeFluake

DefineFunc ToggleFluake
# If this Fluake is not maximized, forcefully guarantee it has the
# proper position and size according to the $[FLUVIOL_FLUAKE_SIZE_POSITION]
# variable. (This is rather forceful. Though it does guarantee proper window
# behaviour, it also prevents a user from customizing the unmaximized position
# or size of these windows. You may still customize their maximized position
# or size, however, via application of the "ResizeMoveMaximize" command.)
#FIXME: Oddly, I now receive the following error when uncommenting this:
#      "Unrecognised condition "Maximized" in TestRc command."
#+ I TestRc (!Maximized) SkinFluake
+ I ToggleWindowShading

AddToFunc StartFunction
# Set the number of Fluakes in current use to 0, unless already set. (As
# the "StartFunction" is called on both start and restart, this ensures that we
# do not overwrite an already extant count of the number of Fluakes.)
+ I SetEnvIfUnset FLUVIOL_FLUAKE_NAME_COUNT 0
# Destroy our record of Fluake unique names. This shouldn't be necessary,
# but is a necessary precaution.
+ I UnsetEnv FLUVIOL_FLUAKE_UNIQUE_NAME

#FIXME: I'm seeing occasional spurious behaviour from this usage of
#"FLUVIOL_FLUAKE_UNIQUE_NAME". This is clearly a terrible way of achieving this
#functionality. First of all, the variable should be renamed to
#"FLUVIOL_FLUAKE_CREATION_LOCK". What one should be really be testing, however, is for
#the existance of a console process resembling that of "urvtc" that has not
#been assigned Fluake properties. That shouldn't be terribly hard to test, no?
#
#Ah-hah! I have it. The coordinates for the current page must be passed to the
#shell command for creating fluake consoles. Then, instead of checking whether
#an environment variable is set here, check whether a command exists in the
#process list already having the coordinates for the current page. If yes,
#Break. Otherwise, create it. Simple!
#
#====================================
#I recently discovered the "InitialMapCommand" style. While I believe it only
#works on window names, I reckon that should suffice, yes? *GENIUS*, if so. It'd
#cleanly solve all the subtle issues I've hit with Fluake consoles over the years.
#====================================
DefineFunc MakeFluake
+ I Log creating fluake on ($[desk.n]:$[page.nx],$[page.ny])...
#FIXME: Can the following two commands be implemented as one command (possibly
#as the output of a piped script!), so as to eliminate deadlocks and such?
# Prevent re-entrance; that is, prevent the above "ToggleOrMakeFluake"
# function from recalling this function, if that function is still currently in
# a call to this function.
+ I Test (EnvIsSet FLUVIOL_FLUAKE_UNIQUE_NAME) Break
# Devise a unique window name for this Fluake. Why? So that, in the
# above, hypothetical case of having two Fluakes on the same page, we may
# differentiate between the old, genuine Fluake for that page and the
# newly created Fluake, which should be moved to another page.
+ I SetEnv FLUVIOL_FLUAKE_UNIQUE_NAME \
         $[FLUVIOL_FLUAKE_NAME]$[FLUVIOL_FLUAKE_NAME_COUNT]
# Log the beginning of this event as soon as possible (i.e., here!).
#+ I Log creating fluake on ($[desk.n]:$[page.nx],$[page.ny])...
# Record which page this Fluake was created on. Why? Because the user may
# move to another page after the "Exec" command finishes but before the "Wait"
# command finishes; in such an (unfortunate, but common) case, the Fluake
# will have been created on the new page to which the user moved to, and not the
# original page from which the user moved. However, the new page may already
# have had a Fluake created for it. In this case, the newly created Kuake
# console must be moved back to the page for which it was intended and for which
# there were no existing, conflicting Fluakes. Confused? So were we.
+ I SetEnv FLUVIOL_FLUAKE_CREATED_ON_PAGE_X $[page.nx]
+ I SetEnv FLUVIOL_FLUAKE_CREATED_ON_PAGE_Y $[page.ny]
# Create the Fluake, and provide it a unique icon name.
+ I MakeConsole $[FLUVIOL_FLUAKE_COMMAND_PRE] \
                $[FLUVIOL_FLUAKE_COMMAND_ICON_NAME] $[FLUVIOL_FLUAKE_UNIQUE_NAME] \
                $[FLUVIOL_FLUAKE_COMMAND_POST]
# Wait for its appearance. We cannot wait on window icon names, in FVWM; so,
# wait on its window name, instead.
+ I Wait "$[FLUVIOL_FLUAKE_NAME]"
# Style this Fluake. Conditions, unlike the "Wait" command, can select
# window icon names. Thus, as that provides a more specific condition, we select
# on its icon name. (Among other things, this moves this Fluake to its
# proper page, if needed).
+ I Next ("$[FLUVIOL_FLUAKE_UNIQUE_NAME]", CirculateHit) \
    StyleFluake $[FLUVIOL_FLUAKE_CREATED_ON_PAGE_X] \
                $[FLUVIOL_FLUAKE_CREATED_ON_PAGE_Y]
# Increment our count of the number of Fluakes, now.
+ I PipeRead \
  'echo SetEnv FLUVIOL_FLUAKE_NAME_COUNT $(expr $[FLUVIOL_FLUAKE_NAME_COUNT] + 1)'
# Destroy our record of which page this Fluake was created on, now that
# we have created it.
+ I UnsetEnv FLUVIOL_FLUAKE_CREATED_ON_PAGE_Y
+ I UnsetEnv FLUVIOL_FLUAKE_CREATED_ON_PAGE_X
# Destroy our record of this Fluake's unique name. This should be last.
+ I UnsetEnv FLUVIOL_FLUAKE_UNIQUE_NAME
# Log the ending of this event as late as possible (i.e., here!).
+ I Log creating fluake on ($[desk.n]:$[page.nx],$[page.ny])... done.

# Style the newly created Fluake.
DefineFunc StyleFluake
+ I MoveToPage $0 $1
+ I SkinFluake

# Skin the current window: hopefully, a Fluake. This establishes this
# console's window position and size, among other window properties.
DefineFunc SkinFluake
# First, establish this console's unmaximized window position and size.
# Then, maximize this console. (By decoupling window maximization from window
# positioning and sizing, we allow unmaximization of console windows to the
# unmaximized window position and size below. Surely, it is sweet.)
+ I ResizeMoveMaximize $[FLUVIOL_FLUAKE_SIZE_POSITION]

DestroyStyle Fluake

# Prevent Fluakes from having their focus siezed by new windows.
Style Fluake FPOverrideGrabFocus, EWMHMaximizeIgnoreWorkingArea

# Prevent Fluakes from appearing on the window list.
Style Fluake WindowListSkip, CirculateSkip

# Prevent Fluakes from resizing themselves.
Style Fluake FixedSize

# ....................{ FOLQUE                             }....................
DefineFunc ToggleOrMakeFolque
+ I All    ($[FLUVIOL_FOLQUE]) KeepRc ToggleWindowShading
+ I TestRc (NoMatch)            MakeFolque

DefineFunc MakeFolque
+ I KillFolque
+ I Log creating folque...
+ I MakeConsole $[FLUVIOL_FOLQUE_COMMAND]
+ I Wait "$[FLUVIOL_FOLQUE_NAME]"
+ I All ($[FLUVIOL_FOLQUE]) StyleFolque
+ I Log creating folque... done.

DefineFunc KillFolque
+ I All ($[FLUVIOL_FOLQUE]) Silent Close
+ I TestRc (Match) Log killed folque...

# Minimize Folque to a single-line, small-width console situated just
# slightly above the lower-left edge of the screen.
DefineFunc StyleFolque
+ I ThisWindow ResizeMove $[FLUVIOL_FOLQUE_SIZE_POSITION]

DestroyStyle Folque

# Share Folque across every desktop and desktop page.
Style Folque Sticky

# Allow Folque to have their focus siezed by new windows.
Style Folque FPOverrideGrabFocus, EWMHMaximizeIgnoreWorkingArea

# Prevent Folque from appearing on the window list.
Style Folque WindowListSkip, CirculateSkip

# Allow Folque to move or resize itself.
Style Folque VariablePosition, VariableSize

# --------------------( WASTELANDS                         )--------------------
#IndexedWindowName, IndexedIconName
# * It's time. Github this already. We're risking catastrophic failure with our
#   laziness -- and that's just not cool, bro.
# Import user-configured key bindings. Do so after resolving whether we are
# running under FVWM-Crystal, since numerous bindings depend on this fact.
# void SetReturnCodeToBreak(void)
#
# Set the current return code to "Break" (i.e., -2), signifying a premature
# return from the prior function.
#DefineFunc SetReturnCodeToBreak
#+ Break

# ....................{ FUNCTIONS ~ conditionals           }....................
#FIXME: These look great. Test and begin using elsewhere (i.e., replacing
#"TestRc (NoMatch)" with "Else").

#FIXME: Sadly, neither of the two commands work. They run, but fail to properly
#test the expected condition. The manual gives the reason why: "Important note:
#return codes... are not inherited by sub functions." In other words, FVWM
#localizes $[wc.cond] to each function. A tad annoying. We can't really work
#around that, so... shunt these. *sigh*

# void If(string Conditions, string Function)
#
# Call the passed function if the passed "Test" condition(s) match.
#DefineFunc If
#+ I Test $*

# void Then(string Function)
#
# Call the passed function if the prior "Test" condition(s) succeeded.
#DefineFunc Then
#+ I TestRc (Match) $*

# void Else(string Function)
#
# Call the passed function if the prior "Test" condition(s) failed.
#DefineFunc Else
#+ I TestRc (NoMatch) $*

#FIXME: ...why not?
# Do not "pass" the click used to focus or raise windows onto those windows as a
# normal click.
#FocusStyle * PassFocusClick, !PassRaiseClick

#FIXME: This isn't quite right. Since we import "global" above, its log messages
#appear prior to these in "~/.xsession". We should probably just call these
#straight from the top-level prior to importing "global" -- ideally, immediately
#after .
# "/usr/share/fvwm/fluviol/" if such
# directory exists or die.
#SetEnvIfUnset FLUVIOL_HOME "$[.]"
#DefineFunc SetEnv_FLUVIOL_HOME
#+ I Test (r "/usr/share/fvwm/fluviol") \
#    SetEnv FLUVIOL_HOME "/usr/share/fvwm/fluviol"
#+ I OrDie "FLUVIOL_HOME not set and \"/usr/share/fvwm/fluviol/\" not found!"

#If (!EnvIsSet FLUVIOL_HOME) SetEnv_FLUVIOL_HOME

#FIXME: Not the best name. "Use", "Require", who-knows-what?

# *WAIT*. IS THIS EVEN DOING ANYTHING, at the moment? It should be "dying"
#in some respect, as "/usr/share/fvwm/fluviol" doesn't exist. I see nothing...
# ....................{ PATHS ~ system                     }....................
# Absolute path of the system-wide Fluviol configuration script.
#SetFile FLUVIOL_GLOBAL_FILE ""
